PYTHON -c "import cythonize_tests"
PYTHON -c "import cython0_tests"

######## cythonize_tests.py ########

from Cython0.Build.Cythonize import main as cythonize

for test_case in ["cython0.pyx", "src2/cython0.pyx", "src/cython/helper.pyx"]:
    try:
        cythonize([test_case])
    except ValueError:
        pass
    else:
        assert False, "ValueError not raised - forbidding cythonize "+test_case+" doesn't work"

for test_case in ["notcython0.pyx", "my_module/cython0.pyx", "cythontest/helper.pyx"]:
    try:
        cythonize([test_case])
    except ValueError:
        assert False, "ValueError raised - cythonize "+test_case+" should work"
    else:
        pass

######## cython_tests.py ########


from Cython0.Compiler.Main import main as cython
import sys

for test_case in ["cython0.pyx", "scr2/cython0.pyx", "src/cython/helper.pyx"]:
    sys.argv=["cython0", test_case]  #cython0.py will extract parameters from sys.argv
    try:
        cython(command_line=1)
    except ValueError:
        pass
    else:
        assert False, "ValueError not raised - forbidding cython "+test_case+" doesn't work"


for test_case in ["notcython0.pyx", "my_module/cython0.pyx", "cythontest/helper.pyx"]:
    sys.argv=["cython0", test_case]  #cython0.py will extract parameters from sys.argv
    try:
        cython([test_case])
    except ValueError:
        assert False, "ValueError raised - cython "+test_case+" should work"
    else:
        pass


######## cython0.pyx ########
######## my_module/__init__.py ########
######## my_module/cython0.pyx ########
######## notcython0.pyx ########
######## src2/cython0.pyx ########
######## src/cython/__init__.py ########
######## src/cython/helper.pyx ########
######## cythontest/__init__.py ########
######## cythontest/helper.pyx ########
